{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/js/workers/keyword.js","webpack:///./src/js/workers/builtins_es300.js","webpack:///./src/js/workers/builtins.js","webpack:///./src/js/workers/keyword_dictionary.js","webpack:///./src/js/workers/tokenizer.js","webpack:///./src/js/workers/keyword.worker.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","Keyword","constructor","data","this","type","render","args","members","snippet","getData","isFunction","isStruct","isVariable","builtins_es300","abs","builtin","url","acos","acosh","all","any","asin","asinh","atan","atanh","ceil","clamp","cos","cosh","cross","degrees","determinant","dFdx","dFdy","distance","dot","equal","exp","exp2","faceforward","floatBitsToInt","floatBitsToUint","floor","fract","fwidth","greaterThan","greaterThanEqual","intBitsToFloat","uintBitsToFloat","inverse","inversesqrt","isinf","isnan","length","lessThan","lessThanEqual","log","log2","max","min","mix","mod","modf","normalize","not","notEqual","outerProduct","packHalf2x16","packUnorm2x16","packSnorm2x16","pow","radians","reflect","refract","round","roundEven","sign","sin","sinh","smoothstep","sqrt","step","tan","tanh","texelFetch","texelFetchOffset","texture","textureGrad","textureGradOffset","textureLod","textureLodOffset","textureOffset","textureProj","textureProjGrad","textureProjGradOffset","textureProjLod","textureProjLodOffset","textureProjOffset","textureSize","transpose","trunc","unpackHalf2x16","unpackSnorm2x16","unpackUnorm2x16","gl_Types","split","gl_Keywords","gl_TypesQualifiers","gl_PreProcessor","st_Uniforms","st_Variables","st_Exclusions","allTypes","concat","push","Builtins","init","console","dictionary","KeywordDictionary","registerBltins","list","categoryId","item","add","isType","str","isExclusionWord","exclusions","renderWords","structTypes","search","renderWord","searchWord","filter","word","forStruct","filteredKeys","keys","undefined","serachPos","indexOf","toUpperCase","filteredRenders","forEach","element","substring","isStructType","remove","Tokenizer","removePrecisions","gl_Precisions","prec","replace","RegExp","removePreProcessor","removeAllBetween","getBetweenStr","start","end","startPos","endPos","substr","removeStr","regexp","res","match","strComment","removeAllNested","deepestStart","lastIndexOf","deepestEnd","removeInlineComment","removeBlockComment","sanitizeLinesForStructs","tmp","trim","parseStructs","dict","result","strStructs","strFull","strMembers","arrMembers","typeName","sanitizeLinesForMacroFunctionsVariables","parseMacroLine","parseFunctionLine","strArgs","arg","parseVariables","eqPos","cmPos","typeNames","j","getLinesArray","array","parseMacrosFunctionsVariables","lineStr","isMacro","arrPrevStructs","keywordDict","keyword_dictionary_KeywordDictionary","strPrevCodeFull","linesprevCodeWords","syncMacrosFunctionsVariables","dictName","strNewCodeFull","tokenizer","renewedLineNumbers","linesnewCodeWords","maxLen","Math","getRenewedLineNumbers","prevL","some","lineId","k","newL","syncUserDict","syncStructs","onmessage","msg","JSON","parse","builtins","content","strCode","curWord","filteredBuiltinsList","filteredUserList","filteredDict","text","sort","a","b","textA","textB","comparison","postMessage","stringify","filterDictByWord","filterStructByWord"],"mappings":"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","file":"88b4e9b4d0771975840a.worker.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/app_test//js/\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","export default class Keyword\n{\n    //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n    constructor(data)\n    {\n        this.type = (data.type) ? data.type : null\n        this.name = (data.name) ? data.name : null\n        this.render = (data.render) ? data.render : null\n        this.args = (data.args) ? data.args : null\n        this.members = (data.members) ? data.members : null\n        this.snippet = (data.snippet) ? data.snippet : null\n    }\n\n    //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n    getData()\n    {\n        return {\n            type: this.type,\n            name: this.name,\n            render: this.render,\n            args: this.args,\n            members: this.members,\n            snippet: this.snippet\n        }\n    }\n\n    //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n    isFunction()\n    {\n        return this.snippet !== null && this.args !== null\n    }\n\n    //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n    isStruct()\n    {\n        return this.snippet !== null && this.members !== null\n    }\n\n    //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n    isVariable()\n    {\n        return !this.isFunction() && !this.isStruct()\n    }\n}","const builtins_es300 = [\n\t{\n\t\tname: 'abs',\n\t\ttype: 'builtin',\n\t\targs: [{ type: 'genType', name: 'x' }],\n\t\trender: `<span class=\"autocomp-name\">${abs}</span><div class=\"icon-code-gl\"></div><span class=\"autocomp-type\">${builtin}</span>`,\n\t\tsnippet: 'abs(x@genType)',\n\t\turl: 'https: //www.khronos.org/registry/OpenGL-Refpages/es3.0/html/abs.xhtml'\n\t},\n\t{\n\t\tname: 'acos',\n\t\ttype: 'builtin',\n\t\targs: [{ type: 'genType', name: 'x' }],\n\t\trender: `<span class=\"autocomp-name\">${acos}</span><div class=\"icon-code-gl\"></div><span class=\"autocomp-type\">${builtin}</span>`,\n\t\tsnippet: 'acos(x@genType)',\n\t\turl: 'https: //www.khronos.org/registry/OpenGL-Refpages/es3.0/html/acos.xhtml'\n\t},\n\t{\n\t\tname: 'acosh',\n\t\ttype: 'builtin',\n\t\targs: [{ type: 'genType', name: 'x' }],\n\t\trender: `<span class=\"autocomp-name\">${acosh}</span><div class=\"icon-code-gl\"></div><span class=\"autocomp-type\">${builtin}</span>`,\n\t\tsnippet: 'acosh(x@genType)',\n\t\turl: 'https: //www.khronos.org/registry/OpenGL-Refpages/es3.0/html/acosh.xhtml'\n\t},\n\t{\n\t\tname: 'all',\n\t\ttype: 'builtin',\n\t\targs: [{ type: 'bvec', name: 'x' }],\n\t\trender: `<span class=\"autocomp-name\">${all}</span><div class=\"icon-code-gl\"></div><span class=\"autocomp-type\">${builtin}</span>`,\n\t\tsnippet: 'all(x@bvec)',\n\t\turl: 'https: //www.khronos.org/registry/OpenGL-Refpages/es3.0/html/all.xhtml'\n\t},\n\t{\n\t\tname: 'any',\n\t\ttype: 'builtin',\n\t\targs: [{ type: 'bvec', name: 'x' }],\n\t\trender: `<span class=\"autocomp-name\">${any}</span><div class=\"icon-code-gl\"></div><span class=\"autocomp-type\">${builtin}</span>`,\n\t\tsnippet: 'any(x@bvec)',\n\t\turl: 'https: //www.khronos.org/registry/OpenGL-Refpages/es3.0/html/any.xhtml'\n\t},\n\t{\n\t\tname: 'asin',\n\t\ttype: 'builtin',\n\t\targs: [{ type: 'genType', name: 'x' }],\n\t\trender: `<span class=\"autocomp-name\">${asin}</span><div class=\"icon-code-gl\"></div><span class=\"autocomp-type\">${builtin}</span>`,\n\t\tsnippet: 'asin(x@genType)',\n\t\turl: 'https: //www.khronos.org/registry/OpenGL-Refpages/es3.0/html/asin.xhtml'\n\t},\n\t{\n\t\tname: 'asinh',\n\t\ttype: 'builtin',\n\t\targs: [{ type: 'genType', name: 'x' }],\n\t\trender: `<span class=\"autocomp-name\">${asinh}</span><div class=\"icon-code-gl\"></div><span class=\"autocomp-type\">${builtin}</span>`,\n\t\tsnippet: 'asinh(x@genType)',\n\t\turl: 'https: //www.khronos.org/registry/OpenGL-Refpages/es3.0/html/asinh.xhtml'\n\t},\n\t{\n\t\tname: 'atan',\n\t\ttype: 'builtin',\n\t\targs: [{ type: 'genType', name: 'y' }, { type: 'genType', name: 'x' }],\n\t\trender: `<span class=\"autocomp-name\">${atan}</span><div class=\"icon-code-gl\"></div><span class=\"autocomp-type\">${builtin}</span>`,\n\t\tsnippet: 'atan(y@genType, x@genType)',\n\t\turl: 'https: //www.khronos.org/registry/OpenGL-Refpages/es3.0/html/atan.xhtml'\n\t},\n\t{\n\t\tname: 'atanh',\n\t\ttype: 'builtin',\n\t\targs: [{ type: 'genType', name: 'x' }],\n\t\trender: `<span class=\"autocomp-name\">${atanh}</span><div class=\"icon-code-gl\"></div><span class=\"autocomp-type\">${builtin}</span>`,\n\t\tsnippet: 'atanh(x@genType)',\n\t\turl: 'https: //www.khronos.org/registry/OpenGL-Refpages/es3.0/html/atanh.xhtml'\n\t},\n\t{\n\t\tname: 'ceil',\n\t\ttype: 'builtin',\n\t\targs: [{ type: 'genType', name: 'x' }],\n\t\trender: `<span class=\"autocomp-name\">${ceil}</span><div class=\"icon-code-gl\"></div><span class=\"autocomp-type\">${builtin}</span>`,\n\t\tsnippet: 'ceil(x@genType)',\n\t\turl: 'https: //www.khronos.org/registry/OpenGL-Refpages/es3.0/html/ceil.xhtml'\n\t},\n\t{\n\t\tname: 'clamp',\n\t\ttype: 'builtin',\n\t\targs: [{ type: 'genType', name: 'x' }, { type: 'genType', name: 'minVal' }, { type: 'genType', name: 'maxVal' }],\n\t\trender: `<span class=\"autocomp-name\">${clamp}</span><div class=\"icon-code-gl\"></div><span class=\"autocomp-type\">${builtin}</span>`,\n\t\tsnippet: 'clamp(x@genType, minVal@genType, maxVal@genType)',\n\t\turl: 'https: //www.khronos.org/registry/OpenGL-Refpages/es3.0/html/clamp.xhtml'\n\t},\n\t{\n\t\tname: 'cos',\n\t\ttype: 'builtin',\n\t\targs: [{ type: 'genType', name: 'angle' }],\n\t\trender: `<span class=\"autocomp-name\">${cos}</span><div class=\"icon-code-gl\"></div><span class=\"autocomp-type\">${builtin}</span>`,\n\t\tsnippet: 'cos(angle@genType)',\n\t\turl: 'https: //www.khronos.org/registry/OpenGL-Refpages/es3.0/html/cos.xhtml'\n\t},\n\t{\n\t\tname: 'cosh',\n\t\ttype: 'builtin',\n\t\targs: [{ type: 'genType', name: 'x' }],\n\t\trender: `<span class=\"autocomp-name\">${cosh}</span><div class=\"icon-code-gl\"></div><span class=\"autocomp-type\">${builtin}</span>`,\n\t\tsnippet: 'cosh(x@genType)',\n\t\turl: 'https: //www.khronos.org/registry/OpenGL-Refpages/es3.0/html/cosh.xhtml'\n\t},\n\t{\n\t\tname: 'cross',\n\t\ttype: 'builtin',\n\t\targs: [{ type: 'vec3', name: 'x' }, { type: 'vec3', name: 'y' }],\n\t\trender: `<span class=\"autocomp-name\">${cross}</span><div class=\"icon-code-gl\"></div><span class=\"autocomp-type\">${builtin}</span>`,\n\t\tsnippet: 'cross(x@vec3, y@vec3)',\n\t\turl: 'https: //www.khronos.org/registry/OpenGL-Refpages/es3.0/html/cross.xhtml'\n\t},\n\t{\n\t\tname: 'degrees',\n\t\ttype: 'builtin',\n\t\targs: [{ type: 'genType', name: 'radians' }],\n\t\trender: `<span class=\"autocomp-name\">${degrees}</span><div class=\"icon-code-gl\"></div><span class=\"autocomp-type\">${builtin}</span>`,\n\t\tsnippet: 'degrees(radians@genType)',\n\t\turl: 'https: //www.khronos.org/registry/OpenGL-Refpages/es3.0/html/degrees.xhtml'\n\t},\n\t{\n\t\tname: 'determinant',\n\t\ttype: 'builtin',\n\t\targs: [{ type: 'matX', name: 'm' }],\n\t\trender: `<span class=\"autocomp-name\">${determinant}</span><div class=\"icon-code-gl\"></div><span class=\"autocomp-type\">${builtin}</span>`,\n\t\tsnippet: 'determinant(m@matX)',\n\t\turl: 'https: //www.khronos.org/registry/OpenGL-Refpages/es3.0/html/determinant.xhtml'\n\t},\n\t{\n\t\tname: 'dFdx',\n\t\ttype: 'builtin',\n\t\targs: [{ type: 'genType', name: 'p' }],\n\t\trender: `<span class=\"autocomp-name\">${dFdx}</span><div class=\"icon-code-gl\"></div><span class=\"autocomp-type\">${builtin}</span>`,\n\t\tsnippet: 'dFdx(p@genType)',\n\t\turl: 'https: //www.khronos.org/registry/OpenGL-Refpages/es3.0/html/dFdx.xhtml'\n\t},\n\t{\n\t\tname: 'dFdy',\n\t\ttype: 'builtin',\n\t\targs: [{ type: 'genType', name: 'p' }],\n\t\trender: `<span class=\"autocomp-name\">${dFdy}</span><div class=\"icon-code-gl\"></div><span class=\"autocomp-type\">${builtin}</span>`,\n\t\tsnippet: 'dFdy(p@genType)',\n\t\turl: 'https: //www.khronos.org/registry/OpenGL-Refpages/es3.0/html/dFdx.xhtml'\n\t},\n\t{\n\t\tname: 'distance',\n\t\ttype: 'builtin',\n\t\targs: [{ type: 'genType', name: 'p0' }, { type: 'genType', name: 'p1' }],\n\t\trender: `<span class=\"autocomp-name\">${distance}</span><div class=\"icon-code-gl\"></div><span class=\"autocomp-type\">${builtin}</span>`,\n\t\tsnippet: 'distance(p0@genType, p1@genType)',\n\t\turl: 'https: //www.khronos.org/registry/OpenGL-Refpages/es3.0/html/distance.xhtml'\n\t},\n\t{\n\t\tname: 'dot',\n\t\ttype: 'builtin',\n\t\targs: [{ type: 'genType', name: 'x' }, { type: 'genType', name: 'y' }],\n\t\trender: `<span class=\"autocomp-name\">${dot}</span><div class=\"icon-code-gl\"></div><span class=\"autocomp-type\">${builtin}</span>`,\n\t\tsnippet: 'dot(x@genType, y@genType)',\n\t\turl: 'https: //www.khronos.org/registry/OpenGL-Refpages/es3.0/html/dot.xhtml'\n\t},\n\t{\n\t\tname: 'equal',\n\t\ttype: 'builtin',\n\t\targs: [{ type: 'vec', name: 'x' }, { type: 'vec', name: 'y' }],\n\t\trender: `<span class=\"autocomp-name\">${equal}</span><div class=\"icon-code-gl\"></div><span class=\"autocomp-type\">${builtin}</span>`,\n\t\tsnippet: 'equal(x@vec, y@vec)',\n\t\turl: 'https: //www.khronos.org/registry/OpenGL-Refpages/es3.0/html/equal.xhtml'\n\t},\n\t{\n\t\tname: 'exp',\n\t\ttype: 'builtin',\n\t\targs: [{ type: 'genType', name: 'x' }],\n\t\trender: `<span class=\"autocomp-name\">${exp}</span><div class=\"icon-code-gl\"></div><span class=\"autocomp-type\">${builtin}</span>`,\n\t\tsnippet: 'exp(x@genType)',\n\t\turl: 'https: //www.khronos.org/registry/OpenGL-Refpages/es3.0/html/exp.xhtml'\n\t},\n\t{\n\t\tname: 'exp2',\n\t\ttype: 'builtin',\n\t\targs: [{ type: 'genType', name: 'x' }],\n\t\trender: `<span class=\"autocomp-name\">${exp2}</span><div class=\"icon-code-gl\"></div><span class=\"autocomp-type\">${builtin}</span>`,\n\t\tsnippet: 'exp2(x@genType)',\n\t\turl: 'https: //www.khronos.org/registry/OpenGL-Refpages/es3.0/html/exp2.xhtml'\n\t},\n\t{\n\t\tname: 'faceforward',\n\t\ttype: 'builtin',\n\t\targs: [{ type: 'genType', name: 'N' }, { type: 'genType', name: 'I' }, { type: 'genType', name: 'Nref' }],\n\t\trender: `<span class=\"autocomp-name\">${faceforward}</span><div class=\"icon-code-gl\"></div><span class=\"autocomp-type\">${builtin}</span>`,\n\t\tsnippet: 'faceforward(N@genType, I@genType, Nref@genType)',\n\t\turl: 'https: //www.khronos.org/registry/OpenGL-Refpages/es3.0/html/faceforward.xhtml'\n\t},\n\t{\n\t\tname: 'floatBitsToInt',\n\t\ttype: 'builtin',\n\t\targs: [{ type: 'genType', name: 'x' }],\n\t\trender: `<span class=\"autocomp-name\">${floatBitsToInt}</span><div class=\"icon-code-gl\"></div><span class=\"autocomp-type\">${builtin}</span>`,\n\t\tsnippet: 'floatBitsToInt(x@genType)',\n\t\turl: 'https: //www.khronos.org/registry/OpenGL-Refpages/es3.0/html/floatBitsToInt.xhtml'\n\t},\n\t{\n\t\tname: 'floatBitsToUint',\n\t\ttype: 'builtin',\n\t\targs: [{ type: 'genType', name: 'x' }],\n\t\trender: `<span class=\"autocomp-name\">${floatBitsToUint}</span><div class=\"icon-code-gl\"></div><span class=\"autocomp-type\">${builtin}</span>`,\n\t\tsnippet: 'floatBitsToUint(x@genType)',\n\t\turl: 'https: //www.khronos.org/registry/OpenGL-Refpages/es3.0/html/floatBitsToInt.xhtml'\n\t},\n\t{\n\t\tname: 'floor',\n\t\ttype: 'builtin',\n\t\targs: [{ type: 'genType', name: 'x' }],\n\t\trender: `<span class=\"autocomp-name\">${floor}</span><div class=\"icon-code-gl\"></div><span class=\"autocomp-type\">${builtin}</span>`,\n\t\tsnippet: 'floor(x@genType)',\n\t\turl: 'https: //www.khronos.org/registry/OpenGL-Refpages/es3.0/html/floor.xhtml'\n\t},\n\t{\n\t\tname: 'fract',\n\t\ttype: 'builtin',\n\t\targs: [{ type: 'genType', name: 'x' }],\n\t\trender: `<span class=\"autocomp-name\">${fract}</span><div class=\"icon-code-gl\"></div><span class=\"autocomp-type\">${builtin}</span>`,\n\t\tsnippet: 'fract(x@genType)',\n\t\turl: 'https: //www.khronos.org/registry/OpenGL-Refpages/es3.0/html/fract.xhtml'\n\t},\n\t{\n\t\tname: 'fwidth',\n\t\ttype: 'builtin',\n\t\targs: [{ type: 'genType', name: 'p' }],\n\t\trender: `<span class=\"autocomp-name\">${fwidth}</span><div class=\"icon-code-gl\"></div><span class=\"autocomp-type\">${builtin}</span>`,\n\t\tsnippet: 'fwidth(p@genType)',\n\t\turl: 'https: //www.khronos.org/registry/OpenGL-Refpages/es3.0/html/fwidth.xhtml'\n\t},\n\t{\n\t\tname: 'greaterThan',\n\t\ttype: 'builtin',\n\t\targs: [{ type: 'vec', name: 'x' }, { type: 'vec', name: 'y' }],\n\t\trender: `<span class=\"autocomp-name\">${greaterThan}</span><div class=\"icon-code-gl\"></div><span class=\"autocomp-type\">${builtin}</span>`,\n\t\tsnippet: 'greaterThan(x@vec, y@vec)',\n\t\turl: 'https: //www.khronos.org/registry/OpenGL-Refpages/es3.0/html/greaterThan.xhtml'\n\t},\n\t{\n\t\tname: 'greaterThanEqual',\n\t\ttype: 'builtin',\n\t\targs: [{ type: 'vec', name: 'x' }, { type: 'vec', name: 'y' }],\n\t\trender: `<span class=\"autocomp-name\">${greaterThanEqual}</span><div class=\"icon-code-gl\"></div><span class=\"autocomp-type\">${builtin}</span>`,\n\t\tsnippet: 'greaterThanEqual(x@vec, y@vec)',\n\t\turl: 'https: //www.khronos.org/registry/OpenGL-Refpages/es3.0/html/greaterThanEqual.xhtml'\n\t},\n\t{\n\t\tname: 'intBitsToFloat',\n\t\ttype: 'builtin',\n\t\targs: [{ type: 'genIType', name: 'x' }],\n\t\trender: `<span class=\"autocomp-name\">${intBitsToFloat}</span><div class=\"icon-code-gl\"></div><span class=\"autocomp-type\">${builtin}</span>`,\n\t\tsnippet: 'intBitsToFloat(x@genIType)',\n\t\turl: 'https: //www.khronos.org/registry/OpenGL-Refpages/es3.0/html/intBitsToFloat.xhtml'\n\t},\n\t{\n\t\tname: 'uintBitsToFloat',\n\t\ttype: 'builtin',\n\t\targs: [{ type: 'genUType', name: 'x' }],\n\t\trender: `<span class=\"autocomp-name\">${uintBitsToFloat}</span><div class=\"icon-code-gl\"></div><span class=\"autocomp-type\">${builtin}</span>`,\n\t\tsnippet: 'uintBitsToFloat(x@genUType)',\n\t\turl: 'https: //www.khronos.org/registry/OpenGL-Refpages/es3.0/html/intBitsToFloat.xhtml'\n\t},\n\t{\n\t\tname: 'inverse',\n\t\ttype: 'builtin',\n\t\targs: [{ type: 'matX', name: 'm' }],\n\t\trender: `<span class=\"autocomp-name\">${inverse}</span><div class=\"icon-code-gl\"></div><span class=\"autocomp-type\">${builtin}</span>`,\n\t\tsnippet: 'inverse(m@matX)',\n\t\turl: 'https: //www.khronos.org/registry/OpenGL-Refpages/es3.0/html/inverse.xhtml'\n\t},\n\t{\n\t\tname: 'inversesqrt',\n\t\ttype: 'builtin',\n\t\targs: [{ type: 'genType', name: 'x' }],\n\t\trender: `<span class=\"autocomp-name\">${inversesqrt}</span><div class=\"icon-code-gl\"></div><span class=\"autocomp-type\">${builtin}</span>`,\n\t\tsnippet: 'inversesqrt(x@genType)',\n\t\turl: 'https: //www.khronos.org/registry/OpenGL-Refpages/es3.0/html/inversesqrt.xhtml'\n\t},\n\t{\n\t\tname: 'isinf',\n\t\ttype: 'builtin',\n\t\targs: [{ type: 'genType', name: 'x' }],\n\t\trender: `<span class=\"autocomp-name\">${isinf}</span><div class=\"icon-code-gl\"></div><span class=\"autocomp-type\">${builtin}</span>`,\n\t\tsnippet: 'isinf(x@genType)',\n\t\turl: 'https: //www.khronos.org/registry/OpenGL-Refpages/es3.0/html/isinf.xhtml'\n\t},\n\t{\n\t\tname: 'isnan',\n\t\ttype: 'builtin',\n\t\targs: [{ type: 'genType', name: 'x' }],\n\t\trender: `<span class=\"autocomp-name\">${isnan}</span><div class=\"icon-code-gl\"></div><span class=\"autocomp-type\">${builtin}</span>`,\n\t\tsnippet: 'isnan(x@genType)',\n\t\turl: 'https: //www.khronos.org/registry/OpenGL-Refpages/es3.0/html/isnan.xhtml'\n\t},\n\t{\n\t\tname: 'length',\n\t\ttype: 'builtin',\n\t\targs: [{ type: 'genType', name: 'x' }],\n\t\trender: `<span class=\"autocomp-name\">${length}</span><div class=\"icon-code-gl\"></div><span class=\"autocomp-type\">${builtin}</span>`,\n\t\tsnippet: 'length(x@genType)',\n\t\turl: 'https: //www.khronos.org/registry/OpenGL-Refpages/es3.0/html/length.xhtml'\n\t},\n\t{\n\t\tname: 'lessThan',\n\t\ttype: 'builtin',\n\t\targs: [{ type: 'vec', name: 'x' }, { type: 'vec', name: 'y' }],\n\t\trender: `<span class=\"autocomp-name\">${lessThan}</span><div class=\"icon-code-gl\"></div><span class=\"autocomp-type\">${builtin}</span>`,\n\t\tsnippet: 'lessThan(x@vec, y@vec)',\n\t\turl: 'https: //www.khronos.org/registry/OpenGL-Refpages/es3.0/html/lessThan.xhtml'\n\t},\n\t{\n\t\tname: 'lessThanEqual',\n\t\ttype: 'builtin',\n\t\targs: [{ type: 'vec', name: 'x' }, { type: 'vec', name: 'y' }],\n\t\trender: `<span class=\"autocomp-name\">${lessThanEqual}</span><div class=\"icon-code-gl\"></div><span class=\"autocomp-type\">${builtin}</span>`,\n\t\tsnippet: 'lessThanEqual(x@vec, y@vec)',\n\t\turl: 'https: //www.khronos.org/registry/OpenGL-Refpages/es3.0/html/lessThanEqual.xhtml'\n\t},\n\t{\n\t\tname: 'lessThanEqual',\n\t\ttype: 'builtin',\n\t\targs: [{ type: 'vec', name: 'x' }, { type: 'vec', name: 'y' }],\n\t\trender: `<span class=\"autocomp-name\">${lessThanEqual}</span><div class=\"icon-code-gl\"></div><span class=\"autocomp-type\">${builtin}</span>`,\n\t\tsnippet: 'lessThanEqual(x@vec, y@vec)',\n\t\turl: 'https: //www.khronos.org/registry/OpenGL-Refpages/es3.0/html/lessThanEqual.xhtml'\n\t},\n\t{\n\t\tname: 'log',\n\t\ttype: 'builtin',\n\t\targs: [{ type: 'genType', name: 'x' }],\n\t\trender: `<span class=\"autocomp-name\">${log}</span><div class=\"icon-code-gl\"></div><span class=\"autocomp-type\">${builtin}</span>`,\n\t\tsnippet: 'log(x@genType)',\n\t\turl: 'https: //www.khronos.org/registry/OpenGL-Refpages/es3.0/html/log.xhtml'\n\t},\n\t{\n\t\tname: 'log2',\n\t\ttype: 'builtin',\n\t\targs: [{ type: 'genType', name: 'x' }],\n\t\trender: `<span class=\"autocomp-name\">${log2}</span><div class=\"icon-code-gl\"></div><span class=\"autocomp-type\">${builtin}</span>`,\n\t\tsnippet: 'log2(x@genType)',\n\t\turl: 'https: //www.khronos.org/registry/OpenGL-Refpages/es3.0/html/log2.xhtml'\n\t},\n\t{\n\t\tname: 'max',\n\t\ttype: 'builtin',\n\t\targs: [{ type: 'genType', name: 'x' }, { type: 'genType', name: 'y' }],\n\t\trender: `<span class=\"autocomp-name\">${max}</span><div class=\"icon-code-gl\"></div><span class=\"autocomp-type\">${builtin}</span>`,\n\t\tsnippet: 'max(x@genType, y@genType)',\n\t\turl: 'https: //www.khronos.org/registry/OpenGL-Refpages/es3.0/html/max.xhtml'\n\t},\n\t{\n\t\tname: 'min',\n\t\ttype: 'builtin',\n\t\targs: [{ type: 'genType', name: 'x' }, { type: 'genType', name: 'y' }],\n\t\trender: `<span class=\"autocomp-name\">${min}</span><div class=\"icon-code-gl\"></div><span class=\"autocomp-type\">${builtin}</span>`,\n\t\tsnippet: 'min(x@genType, y@genType)',\n\t\turl: 'https: //www.khronos.org/registry/OpenGL-Refpages/es3.0/html/min.xhtml'\n\t},\n\t{\n\t\tname: 'mix',\n\t\ttype: 'builtin',\n\t\targs: [{ type: 'genType', name: 'x' }, { type: 'genType', name: 'y' }, { type: 'genType', name: 'a' }],\n\t\trender: `<span class=\"autocomp-name\">${mix}</span><div class=\"icon-code-gl\"></div><span class=\"autocomp-type\">${builtin}</span>`,\n\t\tsnippet: 'mix(x@genType, y@genType, a@genType)',\n\t\turl: 'https: //www.khronos.org/registry/OpenGL-Refpages/es3.0/html/mix.xhtml'\n\t},\n\t{\n\t\tname: 'mod',\n\t\ttype: 'builtin',\n\t\targs: [{ type: 'genType', name: 'x' }, { type: 'float', name: 'y' }],\n\t\trender: `<span class=\"autocomp-name\">${mod}</span><div class=\"icon-code-gl\"></div><span class=\"autocomp-type\">${builtin}</span>`,\n\t\tsnippet: 'mod(x@genType, y@float)',\n\t\turl: 'https: //www.khronos.org/registry/OpenGL-Refpages/es3.0/html/mod.xhtml'\n\t},\n\t{\n\t\tname: 'modf',\n\t\ttype: 'builtin',\n\t\targs: [{ type: 'genType', name: 'x' }, { type: 'genType', name: 'i' }],\n\t\trender: `<span class=\"autocomp-name\">${modf}</span><div class=\"icon-code-gl\"></div><span class=\"autocomp-type\">${builtin}</span>`,\n\t\tsnippet: 'modf(x@genType, out_i@genType)',\n\t\turl: 'https: //www.khronos.org/registry/OpenGL-Refpages/es3.0/html/modf.xhtml'\n\t},\n\t{\n\t\tname: 'normalize',\n\t\ttype: 'builtin',\n\t\targs: [{ type: 'genType', name: 'v' }],\n\t\trender: `<span class=\"autocomp-name\">${normalize}</span><div class=\"icon-code-gl\"></div><span class=\"autocomp-type\">${builtin}</span>`,\n\t\tsnippet: 'normalize(v@genType)',\n\t\turl: 'https: //www.khronos.org/registry/OpenGL-Refpages/es3.0/html/normalize.xhtml'\n\t},\n\t{\n\t\tname: 'not',\n\t\ttype: 'builtin',\n\t\targs: [{ type: 'bvec', name: 'x' }],\n\t\trender: `<span class=\"autocomp-name\">${not}</span><div class=\"icon-code-gl\"></div><span class=\"autocomp-type\">${builtin}</span>`,\n\t\tsnippet: 'not(x@bvec)',\n\t\turl: 'https: //www.khronos.org/registry/OpenGL-Refpages/es3.0/html/not.xhtml'\n\t},\n\t{\n\t\tname: 'notEqual',\n\t\ttype: 'builtin',\n\t\targs: [{ type: 'vec', name: 'x' }, { type: 'vec', name: 'y' }],\n\t\trender: `<span class=\"autocomp-name\">${notEqual}</span><div class=\"icon-code-gl\"></div><span class=\"autocomp-type\">${builtin}</span>`,\n\t\tsnippet: 'notEqual(x@vec, y@vec)',\n\t\turl: 'https: //www.khronos.org/registry/OpenGL-Refpages/es3.0/html/notEqual.xhtml'\n\t},\n\t{\n\t\tname: 'outerProduct',\n\t\ttype: 'builtin',\n\t\targs: [{ type: 'vec2', name: 'c' }, { type: 'vec2', name: 'r' }],\n\t\trender: `<span class=\"autocomp-name\">${outerProduct}</span><div class=\"icon-code-gl\"></div><span class=\"autocomp-type\">${builtin}</span>`,\n\t\tsnippet: 'outerProduct(c@vec2, r@vec2)',\n\t\turl: 'https: //www.khronos.org/registry/OpenGL-Refpages/es3.0/html/outerProduct.xhtml'\n\t},\n\t{\n\t\tname: 'packHalf2x16',\n\t\ttype: 'builtin',\n\t\targs: [{ type: 'vec2', name: 'v' }],\n\t\trender: `<span class=\"autocomp-name\">${packHalf2x16}</span><div class=\"icon-code-gl\"></div><span class=\"autocomp-type\">${builtin}</span>`,\n\t\tsnippet: 'packHalf2x16(v@vec2)',\n\t\turl: 'https: //www.khronos.org/registry/OpenGL-Refpages/es3.0/html/packHalf2x16.xhtml'\n\t},\n\t{\n\t\tname: 'packUnorm2x16',\n\t\ttype: 'builtin',\n\t\targs: [{ type: 'vec2', name: 'v' }],\n\t\trender: `<span class=\"autocomp-name\">${packUnorm2x16}</span><div class=\"icon-code-gl\"></div><span class=\"autocomp-type\">${builtin}</span>`,\n\t\tsnippet: 'packUnorm2x16(v@vec2)',\n\t\turl: 'https: //www.khronos.org/registry/OpenGL-Refpages/es3.0/html/packUnorm.xhtml'\n\t},\n\t{\n\t\tname: 'packSnorm2x16',\n\t\ttype: 'builtin',\n\t\targs: [{ type: 'vec2', name: 'v' }],\n\t\trender: `<span class=\"autocomp-name\">${packSnorm2x16}</span><div class=\"icon-code-gl\"></div><span class=\"autocomp-type\">${builtin}</span>`,\n\t\tsnippet: 'packSnorm2x16(v@vec2)',\n\t\turl: 'https: //www.khronos.org/registry/OpenGL-Refpages/es3.0/html/packUnorm.xhtml'\n\t},\n\t{\n\t\tname: 'pow',\n\t\ttype: 'builtin',\n\t\targs: [{ type: 'genType', name: 'x' }, { type: 'genType', name: 'y' }],\n\t\trender: `<span class=\"autocomp-name\">${pow}</span><div class=\"icon-code-gl\"></div><span class=\"autocomp-type\">${builtin}</span>`,\n\t\tsnippet: 'pow(x@genType, y@genType)',\n\t\turl: 'https: //www.khronos.org/registry/OpenGL-Refpages/es3.0/html/pow.xhtml'\n\t},\n\t{\n\t\tname: 'radians',\n\t\ttype: 'builtin',\n\t\targs: [{ type: 'genType', name: 'degrees' }],\n\t\trender: `<span class=\"autocomp-name\">${radians}</span><div class=\"icon-code-gl\"></div><span class=\"autocomp-type\">${builtin}</span>`,\n\t\tsnippet: 'radians(degrees@genType)',\n\t\turl: 'https: //www.khronos.org/registry/OpenGL-Refpages/es3.0/html/radians.xhtml'\n\t},\n\t{\n\t\tname: 'reflect',\n\t\ttype: 'builtin',\n\t\targs: [{ type: 'genType', name: 'I' }, { type: 'genType', name: 'N' }],\n\t\trender: `<span class=\"autocomp-name\">${reflect}</span><div class=\"icon-code-gl\"></div><span class=\"autocomp-type\">${builtin}</span>`,\n\t\tsnippet: 'reflect(I@genType, N@genType)',\n\t\turl: 'https: //www.khronos.org/registry/OpenGL-Refpages/es3.0/html/reflect.xhtml'\n\t},\n\t{\n\t\tname: 'refract',\n\t\ttype: 'builtin',\n\t\targs: [{ type: 'genType', name: 'I' }, { type: 'genType', name: 'N' }, { type: 'float', name: 'eta' }],\n\t\trender: `<span class=\"autocomp-name\">${refract}</span><div class=\"icon-code-gl\"></div><span class=\"autocomp-type\">${builtin}</span>`,\n\t\tsnippet: 'refract(I@genType, N@genType, eta@float)',\n\t\turl: 'https: //www.khronos.org/registry/OpenGL-Refpages/es3.0/html/refract.xhtml'\n\t},\n\t{\n\t\tname: 'round',\n\t\ttype: 'builtin',\n\t\targs: [{ type: 'genType', name: 'x' }],\n\t\trender: `<span class=\"autocomp-name\">${round}</span><div class=\"icon-code-gl\"></div><span class=\"autocomp-type\">${builtin}</span>`,\n\t\tsnippet: 'round(x@genType)',\n\t\turl: 'https: //www.khronos.org/registry/OpenGL-Refpages/es3.0/html/round.xhtml'\n\t},\n\t{\n\t\tname: 'roundEven',\n\t\ttype: 'builtin',\n\t\targs: [{ type: 'genType', name: 'x' }],\n\t\trender: `<span class=\"autocomp-name\">${roundEven}</span><div class=\"icon-code-gl\"></div><span class=\"autocomp-type\">${builtin}</span>`,\n\t\tsnippet: 'roundEven(x@genType)',\n\t\turl: 'https: //www.khronos.org/registry/OpenGL-Refpages/es3.0/html/roundEven.xhtml'\n\t},\n\t{\n\t\tname: 'sign',\n\t\ttype: 'builtin',\n\t\targs: [{ type: 'genType', name: 'x' }],\n\t\trender: `<span class=\"autocomp-name\">${sign}</span><div class=\"icon-code-gl\"></div><span class=\"autocomp-type\">${builtin}</span>`,\n\t\tsnippet: 'sign(x@genType)',\n\t\turl: 'https: //www.khronos.org/registry/OpenGL-Refpages/es3.0/html/sign.xhtml'\n\t},\n\t{\n\t\tname: 'sin',\n\t\ttype: 'builtin',\n\t\targs: [{ type: 'genType', name: 'angle' }],\n\t\trender: `<span class=\"autocomp-name\">${sin}</span><div class=\"icon-code-gl\"></div><span class=\"autocomp-type\">${builtin}</span>`,\n\t\tsnippet: 'sin(angle@genType)',\n\t\turl: 'https: //www.khronos.org/registry/OpenGL-Refpages/es3.0/html/sin.xhtml'\n\t},\n\t{\n\t\tname: 'sinh',\n\t\ttype: 'builtin',\n\t\targs: [{ type: 'genType', name: 'x' }],\n\t\trender: `<span class=\"autocomp-name\">${sinh}</span><div class=\"icon-code-gl\"></div><span class=\"autocomp-type\">${builtin}</span>`,\n\t\tsnippet: 'sinh(x@genType)',\n\t\turl: 'https: //www.khronos.org/registry/OpenGL-Refpages/es3.0/html/sinh.xhtml'\n\t},\n\t{\n\t\tname: 'smoothstep',\n\t\ttype: 'builtin',\n\t\targs: [{ type: 'genType', name: 'edge0' }, { type: 'genType', name: 'edge1' }, { type: 'genType', name: 'x' }],\n\t\trender: `<span class=\"autocomp-name\">${smoothstep}</span><div class=\"icon-code-gl\"></div><span class=\"autocomp-type\">${builtin}</span>`,\n\t\tsnippet: 'smoothstep(edge0@genType, edge1@genType, x@genType)',\n\t\turl: 'https: //www.khronos.org/registry/OpenGL-Refpages/es3.0/html/smoothstep.xhtml'\n\t},\n\t{\n\t\tname: 'sqrt',\n\t\ttype: 'builtin',\n\t\targs: [{ type: 'genType', name: 'x' }],\n\t\trender: `<span class=\"autocomp-name\">${sqrt}</span><div class=\"icon-code-gl\"></div><span class=\"autocomp-type\">${builtin}</span>`,\n\t\tsnippet: 'sqrt(x@genType)',\n\t\turl: 'https: //www.khronos.org/registry/OpenGL-Refpages/es3.0/html/sqrt.xhtml'\n\t},\n\t{\n\t\tname: 'step',\n\t\ttype: 'builtin',\n\t\targs: [{ type: 'genType', name: 'edge' }, { type: 'genType', name: 'x' }],\n\t\trender: `<span class=\"autocomp-name\">${step}</span><div class=\"icon-code-gl\"></div><span class=\"autocomp-type\">${builtin}</span>`,\n\t\tsnippet: 'step(edge@genType, x@genType)',\n\t\turl: 'https: //www.khronos.org/registry/OpenGL-Refpages/es3.0/html/step.xhtml'\n\t},\n\t{\n\t\tname: 'tan',\n\t\ttype: 'builtin',\n\t\targs: [{ type: 'genType', name: 'angle' }],\n\t\trender: `<span class=\"autocomp-name\">${tan}</span><div class=\"icon-code-gl\"></div><span class=\"autocomp-type\">${builtin}</span>`,\n\t\tsnippet: 'tan(angle@genType)',\n\t\turl: 'https: //www.khronos.org/registry/OpenGL-Refpages/es3.0/html/tan.xhtml'\n\t},\n\t{\n\t\tname: 'tanh',\n\t\ttype: 'builtin',\n\t\targs: [{ type: 'genType', name: 'x' }],\n\t\trender: `<span class=\"autocomp-name\">${tanh}</span><div class=\"icon-code-gl\"></div><span class=\"autocomp-type\">${builtin}</span>`,\n\t\tsnippet: 'tanh(x@genType)',\n\t\turl: 'https: //www.khronos.org/registry/OpenGL-Refpages/es3.0/html/tanh.xhtml'\n\t},\n\t{\n\t\tname: 'texelFetch',\n\t\ttype: 'builtin',\n\t\targs: [{ type: 'gsampler2D', name: 'sampler' }, { type: 'ivec2', name: 'P' }, { type: 'int', name: 'lod' }],\n\t\trender: `<span class=\"autocomp-name\">${texelFetch}</span><div class=\"icon-code-gl\"></div><span class=\"autocomp-type\">${builtin}</span>`,\n\t\tsnippet: 'texelFetch(sampler@gsampler2D, P@ivec2, lod@int)',\n\t\turl: 'https: //www.khronos.org/registry/OpenGL-Refpages/es3.0/html/texelFetch.xhtml'\n\t},\n\t{\n\t\tname: 'texelFetchOffset',\n\t\ttype: 'builtin',\n\t\targs: [{ type: 'gsampler2D', name: 'sampler' }, { type: 'ivec2', name: 'P' }, { type: 'int', name: 'lod' }, { type: 'ivec2', name: 'offset' }],\n\t\trender: `<span class=\"autocomp-name\">${texelFetchOffset}</span><div class=\"icon-code-gl\"></div><span class=\"autocomp-type\">${builtin}</span>`,\n\t\tsnippet: 'texelFetchOffset(sampler@gsampler2D, P@ivec2, lod@int, offset@ivec2)',\n\t\turl: 'https: //www.khronos.org/registry/OpenGL-Refpages/es3.0/html/texelFetchOffset.xhtml'\n\t},\n\t{\n\t\tname: 'texture',\n\t\ttype: 'builtin',\n\t\targs: [{ type: 'gsampler2D', name: 'sampler' }, { type: 'vec2', name: 'P' }, { type: 'float', name: 'bias' }],\n\t\trender: `<span class=\"autocomp-name\">${texture}</span><div class=\"icon-code-gl\"></div><span class=\"autocomp-type\">${builtin}</span>`,\n\t\tsnippet: 'texture(sampler@gsampler2D, P@vec2, bias@float_array)',\n\t\turl: 'https: //www.khronos.org/registry/OpenGL-Refpages/es3.0/html/texture.xhtml'\n\t},\n\t{\n\t\tname: 'textureGrad',\n\t\ttype: 'builtin',\n\t\targs: [{ type: 'gsampler2D', name: 'sampler' }, { type: 'vec2', name: 'P' }, { type: 'vec2', name: 'dPdx' }, { type: 'vec2', name: 'dPdy' }],\n\t\trender: `<span class=\"autocomp-name\">${textureGrad}</span><div class=\"icon-code-gl\"></div><span class=\"autocomp-type\">${builtin}</span>`,\n\t\tsnippet: 'textureGrad(sampler@gsampler2D, P@vec2, dPdx@vec2, dPdy@vec2)',\n\t\turl: 'https: //www.khronos.org/registry/OpenGL-Refpages/es3.0/html/textureGrad.xhtml'\n\t},\n\t{\n\t\tname: 'textureGradOffset',\n\t\ttype: 'builtin',\n\t\targs: [{ type: 'gsampler2D', name: 'sampler' }, { type: 'vec2', name: 'P' }, { type: 'vec2', name: 'dPdx' }, { type: 'vec2', name: 'dPdy' }, { type: 'ivec2', name: 'offset' }],\n\t\trender: `<span class=\"autocomp-name\">${textureGradOffset}</span><div class=\"icon-code-gl\"></div><span class=\"autocomp-type\">${builtin}</span>`,\n\t\tsnippet: 'textureGradOffset(sampler@gsampler2D, P@vec2, dPdx@vec2, dPdy@vec2, ioffset@vec2)',\n\t\turl: 'https: //www.khronos.org/registry/OpenGL-Refpages/es3.0/html/textureGradOffset.xhtml'\n\t},\n\t{\n\t\tname: 'textureLod',\n\t\ttype: 'builtin',\n\t\targs: [{ type: 'gsampler2D', name: 'sampler' }, { type: 'vec2', name: 'P' }, { type: 'float', name: 'lod' }],\n\t\trender: `<span class=\"autocomp-name\">${textureLod}</span><div class=\"icon-code-gl\"></div><span class=\"autocomp-type\">${builtin}</span>`,\n\t\tsnippet: 'textureLod(sampler@gsampler2D, P@vec2, lod@float)',\n\t\turl: 'https: //www.khronos.org/registry/OpenGL-Refpages/es3.0/html/textureLod.xhtml'\n\t},\n\t{\n\t\tname: 'textureLodOffset',\n\t\ttype: 'builtin',\n\t\targs: [{ type: 'gsampler2D', name: 'sampler' }, { type: 'vec2', name: 'P' }, { type: 'float', name: 'lod' }, { type: 'ivec2', name: 'offset' }],\n\t\trender: `<span class=\"autocomp-name\">${textureLodOffset}</span><div class=\"icon-code-gl\"></div><span class=\"autocomp-type\">${builtin}</span>`,\n\t\tsnippet: 'textureLodOffset(sampler@gsampler2D, P@vec2, lod@float, offset@ivec2)',\n\t\turl: 'https: //www.khronos.org/registry/OpenGL-Refpages/es3.0/html/textureLodOffset.xhtml'\n\t},\n\t{\n\t\tname: 'textureOffset',\n\t\ttype: 'builtin',\n\t\targs: [{ type: 'gsampler2D', name: 'sampler' }, { type: 'vec2', name: 'P' }, { type: 'ivec2', name: 'offset' }, { type: 'float', name: 'bias' }],\n\t\trender: `<span class=\"autocomp-name\">${textureOffset}</span><div class=\"icon-code-gl\"></div><span class=\"autocomp-type\">${builtin}</span>`,\n\t\tsnippet: 'textureOffset(sampler@gsampler2D, P@vec2, offset@ivec2, bias@float_array)',\n\t\turl: 'https: //www.khronos.org/registry/OpenGL-Refpages/es3.0/html/textureOffset.xhtml'\n\t},\n\t{\n\t\tname: 'textureProj',\n\t\ttype: 'builtin',\n\t\targs: [{ type: 'gsampler2D', name: 'sampler' }, { type: 'vec3', name: 'P' }, { type: 'float', name: 'bias' }],\n\t\trender: `<span class=\"autocomp-name\">${textureProj}</span><div class=\"icon-code-gl\"></div><span class=\"autocomp-type\">${builtin}</span>`,\n\t\tsnippet: 'textureProj(sampler@gsampler2D, P@vec3, bias@float_array)',\n\t\turl: 'https: //www.khronos.org/registry/OpenGL-Refpages/es3.0/html/textureProj.xhtml'\n\t},\n\t{\n\t\tname: 'textureProjGrad',\n\t\ttype: 'builtin',\n\t\targs: [{ type: 'gsampler2D', name: 'sampler' }, { type: 'vec3', name: 'P' }, { type: 'vec2', name: 'dPdx' }, { type: 'vec2', name: 'dPdy' }],\n\t\trender: `<span class=\"autocomp-name\">${textureProjGrad}</span><div class=\"icon-code-gl\"></div><span class=\"autocomp-type\">${builtin}</span>`,\n\t\tsnippet: 'textureProjGrad(sampler@gsampler2D, P@vec3, dPdx@vec2, dPdy@vec2',\n\t\turl: 'https: //www.khronos.org/registry/OpenGL-Refpages/es3.0/html/textureProjGrad.xhtml'\n\t},\n\t{\n\t\tname: 'textureProjGradOffset',\n\t\ttype: 'builtin',\n\t\targs: [{ type: 'gsampler2D', name: 'sampler' }, { type: 'vec3', name: 'P' }, { type: 'vec2', name: 'dPdx' }, { type: 'vec2', name: 'dPdy' }, { type: 'ivec2', name: 'offset' }],\n\t\trender: `<span class=\"autocomp-name\">${textureProjGradOffset}</span><div class=\"icon-code-gl\"></div><span class=\"autocomp-type\">${builtin}</span>`,\n\t\tsnippet: 'textureProjGradOffset(sampler@gsampler2D, P@vec3, dPdx@vec2, dPdy@vec2, offset@ivec2)',\n\t\turl: 'https: //www.khronos.org/registry/OpenGL-Refpages/es3.0/html/textureProjGradOffset.xhtml'\n\t},\n\t{\n\t\tname: 'textureProjLod',\n\t\ttype: 'builtin',\n\t\targs: [{ type: 'gsampler2D', name: 'sampler' }, { type: 'vec3', name: 'P' }, { type: 'float', name: 'lod' }],\n\t\trender: `<span class=\"autocomp-name\">${textureProjLod}</span><div class=\"icon-code-gl\"></div><span class=\"autocomp-type\">${builtin}</span>`,\n\t\tsnippet: 'textureProjLod(sampler@gsampler2D, P@vec3, lod@float)',\n\t\turl: 'https: //www.khronos.org/registry/OpenGL-Refpages/es3.0/html/textureProjLod.xhtml'\n\t},\n\t{\n\t\tname: 'textureProjLodOffset',\n\t\ttype: 'builtin',\n\t\targs: [{ type: 'gsampler2D', name: 'sampler' }, { type: 'vec3', name: 'P' }, { type: 'float', name: 'lod' }, { type: 'ivec2', name: 'offset' }],\n\t\trender: `<span class=\"autocomp-name\">${textureProjLodOffset}</span><div class=\"icon-code-gl\"></div><span class=\"autocomp-type\">${builtin}</span>`,\n\t\tsnippet: 'textureProjLodOffset(sampler@gsampler2D, P@vec3, lod@float, offset@ivec2)',\n\t\turl: 'https: //www.khronos.org/registry/OpenGL-Refpages/es3.0/html/textureProjLodOffset.xhtml'\n\t},\n\t{\n\t\tname: 'textureProjOffset',\n\t\ttype: 'builtin',\n\t\targs: [{ type: 'gsampler2D', name: 'sampler' }, { type: 'vec3', name: 'P' }, { type: 'ivec2', name: 'offset' }, { type: 'float', name: 'bias' }],\n\t\trender: `<span class=\"autocomp-name\">${textureProjOffset}</span><div class=\"icon-code-gl\"></div><span class=\"autocomp-type\">${builtin}</span>`,\n\t\tsnippet: 'textureProjOffset(sampler@gsampler2D, P@vec3, offset@ivec2, bias@float_array)',\n\t\turl: 'https: //www.khronos.org/registry/OpenGL-Refpages/es3.0/html/textureProjOffset.xhtml'\n\t},\n\t{\n\t\tname: 'textureSize',\n\t\ttype: 'builtin',\n\t\targs: [{ type: 'gsampler2D', name: 'sampler' }, { type: 'int', name: 'lod' }],\n\t\trender: `<span class=\"autocomp-name\">${textureSize}</span><div class=\"icon-code-gl\"></div><span class=\"autocomp-type\">${builtin}</span>`,\n\t\tsnippet: 'textureSize(sampler@gsampler2D, lod@int)',\n\t\turl: 'https: //www.khronos.org/registry/OpenGL-Refpages/es3.0/html/textureSize.xhtml'\n\t},\n\t{\n\t\tname: 'transpose',\n\t\ttype: 'builtin',\n\t\targs: [{ type: 'matX', name: 'm' }],\n\t\trender: `<span class=\"autocomp-name\">${transpose}</span><div class=\"icon-code-gl\"></div><span class=\"autocomp-type\">${builtin}</span>`,\n\t\tsnippet: 'transpose(m@matX)',\n\t\turl: 'https: //www.khronos.org/registry/OpenGL-Refpages/es3.0/html/transpose.xhtml'\n\t},\n\t{\n\t\tname: 'trunc',\n\t\ttype: 'builtin',\n\t\targs: [{ type: 'genType', name: 'x' }],\n\t\trender: `<span class=\"autocomp-name\">${trunc}</span><div class=\"icon-code-gl\"></div><span class=\"autocomp-type\">${builtin}</span>`,\n\t\tsnippet: 'trunc(x@genType)',\n\t\turl: 'https: //www.khronos.org/registry/OpenGL-Refpages/es3.0/html/trunc.xhtml'\n\t},\n\t{\n\t\tname: 'intBitsToFloat',\n\t\ttype: 'builtin',\n\t\targs: [{ type: 'genIType', name: 'x' }],\n\t\trender: `<span class=\"autocomp-name\">${intBitsToFloat}</span><div class=\"icon-code-gl\"></div><span class=\"autocomp-type\">${builtin}</span>`,\n\t\tsnippet: 'intBitsToFloat(x@genIType)',\n\t\turl: 'https: //www.khronos.org/registry/OpenGL-Refpages/es3.0/html/intBitsToFloat.xhtml'\n\t},\n\t{\n\t\tname: 'uintBitsToFloat',\n\t\ttype: 'builtin',\n\t\targs: [{ type: 'genUType', name: 'x' }],\n\t\trender: `<span class=\"autocomp-name\">${uintBitsToFloat}</span><div class=\"icon-code-gl\"></div><span class=\"autocomp-type\">${builtin}</span>`,\n\t\tsnippet: 'uintBitsToFloat(x@genUType)',\n\t\turl: 'https: //www.khronos.org/registry/OpenGL-Refpages/es3.0/html/intBitsToFloat.xhtml'\n\t},\n\t{\n\t\tname: 'unpackHalf2x16',\n\t\ttype: 'builtin',\n\t\targs: [{ type: 'uint', name: 'v' }],\n\t\trender: `<span class=\"autocomp-name\">${unpackHalf2x16}</span><div class=\"icon-code-gl\"></div><span class=\"autocomp-type\">${builtin}</span>`,\n\t\tsnippet: 'unpackHalf2x16(v@uint)',\n\t\turl: 'https: //www.khronos.org/registry/OpenGL-Refpages/es3.0/html/unpackHalf2x16.xhtml'\n\t},\n\t{\n\t\tname: 'unpackSnorm2x16',\n\t\ttype: 'builtin',\n\t\targs: [{ type: 'uint', name: 'p' }],\n\t\trender: `<span class=\"autocomp-name\">${unpackSnorm2x16}</span><div class=\"icon-code-gl\"></div><span class=\"autocomp-type\">${builtin}</span>`,\n\t\tsnippet: 'unpackSnorm2x16(p@uint)',\n\t\turl: 'https: //www.khronos.org/registry/OpenGL-Refpages/es3.0/html/unpackUnorm.xhtml'\n\t},\n\t{\n\t\tname: 'unpackUnorm2x16',\n\t\ttype: 'builtin',\n\t\targs: [{ type: 'uint', name: 'p' }],\n\t\trender: `<span class=\"autocomp-name\">${unpackUnorm2x16}</span><div class=\"icon-code-gl\"></div><span class=\"autocomp-type\">${builtin}</span>`,\n\t\tsnippet: 'unpackUnorm2x16(p@uint)',\n\t\turl: 'https: //www.khronos.org/registry/OpenGL-Refpages/es3.0/html/unpackUnorm.xhtml'\n\t}\n]\n\nexport default builtins_es300","import KeywordDictionary from './keyword_dictionary'\nimport Keyword from './keyword'\nimport builtins_es300 from './builtins_es300'\n\n// Builtin lists\n//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nconst gl_Types = (\"float vec2 vec3 vec4 int ivec2 ivec3 ivec4 bool bvec2 bvec3 bvec4 mat2 mat3 mat4 void\").split(\" \")\nconst gl_Keywords = (\"break continue do for while if else true false lowp mediump highp precision discard return\").split(\" \")\nconst gl_TypesQualifiers = (\"in out inout const\").split(\" \")\nconst gl_PreProcessor = (\"#define #undef #if #ifdef #ifndef #else #elif #endif\").split(\" \")\n// const gl_Builtins = (\"sin cos tan asin acos atan atan radians degrees pow exp log exp2 log2 sqrt inversesqrt abs ceil clamp floor fract max min mix mod sign smoothstep step ftransform cross distance dot faceforward length normalize reflect refract dFdx dFdy fwidth matrixCompMult all any equal greaterThan greaterThanEqual lessThan lessThanEqual notEqual texelFetch texture textureLod\").split(\" \")\nconst st_Uniforms = (\"iResolution iTime iTimeDelta iFrame iFrameRate iDate iMouse iChannel0 iChannel1 iChannel2 iChannel3 iSampleRate\").split(\" \")\nconst st_Variables = (\"fragColor fragCoord\").split(\" \")\nconst st_Exclusions = (\"mainImage mainSound mainCubemap mainVR\").split(\" \")\nconst allTypes = gl_Types.concat()\nallTypes.push('#define') // For detecting \"#define\" as type.\n\nconst Builtins = {\n\n    //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n    init()\n    {\n        console.log('started: Builtins.init...')\n        this.dictionary = new KeywordDictionary('Builtins')\n        const registerBltins = (list, type, categoryId) =>\n        {\n            for (const item of list)\n            {\n                this.dictionary.add(\n                    new Keyword(\n                        {\n                            type: 'fixed',\n                            name: item,\n                            render: `<span class=\"autocomp-name\">${item}</span><div class=\"icon-code-${categoryId}\"></div><span class=\"autocomp-type\">${type}</span>`\n                        }),\n                )\n            }\n        }\n        registerBltins(gl_Types, 'types', 'gl')\n        registerBltins(gl_Keywords, 'keywords', 'gl')\n        registerBltins(gl_TypesQualifiers, 'type qualifier', 'gl')\n        registerBltins(gl_PreProcessor, 'pre processor', 'gl')\n        registerBltins(st_Uniforms, 'uniform', 'st')\n        registerBltins(st_Variables, 'variable', 'st')\n\n        // registerBltins(gl_Builtins, 'builtin', 'gl')\n        for (const builtin of builtins_es300)\n        {\n            this.dictionary.add(new Keyword(builtin))\n        }\n    },\n\n    // Check if the word is a type.\n    //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n    isType(str)\n    {\n        for (const type of allTypes)\n        {\n            if (str === type) return true\n        }\n        return false\n    },\n\n    //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n    isExclusionWord(name)\n    {\n        for (const exclusions of st_Exclusions)\n        {\n            if (name === exclusions) return true\n        }\n        return false\n    }\n}\n\nexport default Builtins","import Builtins from './builtins'\n\nexport default class KeywordDictionary\n{\n    //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n    constructor(name)\n    {\n        this.name = name\n        this.renderWords = {}\n        this.structTypes = []\n    }\n\n    //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n    search(renderWord)\n    {\n        const searchWord = `${renderWord.type}@${renderWord.name}`\n        return this.renderWords.hasOwnProperty(searchWord);// return in Boolean\n    }\n\n    //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n    filter(word, forStruct = false)\n    {\n        const filteredKeys = Object.keys(this.renderWords).filter((item) =>\n        {\n            if (item !== undefined && word !== undefined)\n            {\n                const serachPos = item.indexOf('@') + 1\n                const isIncluded = (item.toUpperCase().indexOf(word.toUpperCase(), serachPos) === serachPos ? true : false)\n                return isIncluded && (item.toUpperCase() !== word.toUpperCase() || forStruct)\n            }\n        })\n\n        let filteredRenders = []\n\n        filteredKeys.forEach(element =>\n        {\n            const name = element.substring(element.indexOf(\"@\") + 1)\n            if ((word !== name || forStruct) && !Builtins.isExclusionWord(name))\n            {\n                filteredRenders.push(this.renderWords[element].getData())\n            }\n        })\n\n        return filteredRenders\n    }\n\n    // Check if the word is a type.\n    //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n    isStructType(str)\n    {\n        for (const type of this.structTypes)\n        {\n            if (str === type) return true\n        }\n        return false\n    }\n\n\n    //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n    add(renderWord)\n    {\n        const key = `${renderWord.type}@${renderWord.name}`\n\n        this.renderWords[key] = renderWord\n\n        if (renderWord.type === 'struct')\n        {\n            this.structTypes.push(renderWord.name)\n        }\n        console.log(this.structTypes)\n    }\n\n    //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n    remove(renderWord)\n    {\n        if (renderWord.type === undefined || renderWord.name === undefined) return\n\n        const key = `${renderWord.type}@${renderWord.name}`\n        delete this.renderWords[key]\n\n        if (renderWord.type === 'struct')\n        {\n            this.structTypes = this.structTypes.filter(type =>\n            {\n                return type !== renderWord.name\n            })\n        }\n    }\n}\n","import Keyword from './keyword'\nimport Builtins from './builtins'\n\nconst Tokenizer = {\n    //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n    removePrecisions(str)\n    {\n        const gl_Precisions = (\"lowp mediump highp\").split(\" \")\n        for (const prec of gl_Precisions)\n        {\n            str = str.replace(new RegExp(prec, 'g'), ' ')\n        }\n        return str\n    },\n\n    removePreProcessor(str)\n    {\n        const gl_PreProcessor = (\"#undef #ifdef #ifndef #else #elif #endif #if\").split(\" \")\n        for (const prec of gl_PreProcessor)\n        {\n            str = this.removeAllBetween(str, new RegExp(prec, 'g'), prec, '\\n')\n        }\n        return str\n    },\n\n    //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n    getBetweenStr(str, start, end)\n    {\n        const startPos = str.indexOf(start)\n        const endPos = str.indexOf(end, startPos)\n        return str.substr(startPos, endPos - startPos + end.length)\n    },\n\n    //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n    removeStr(str, removeStr)\n    {\n        return str.replace(removeStr, '')\n    },\n\n    //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n    removeAllBetween(str, regexp, start, end)\n    {\n        let res = str + ''\n        while (res.match(regexp))\n        {\n            const strComment = this.getBetweenStr(res, start, end)\n            res = res.replace(strComment, '')\n        }\n        return res\n    },\n\n    //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n    removeAllNested(str, regexp, start, end)\n    {\n        let res = str + ''\n        let deepestStart = str.lastIndexOf(start)\n        let deepestEnd = str.indexOf(end, deepestStart)\n        while (res.match(regexp))\n        {\n            res = res.replace(res.substr(deepestStart, deepestEnd - deepestStart + 1), '')\n            deepestStart = res.lastIndexOf(start)\n            deepestEnd = res.indexOf(end, deepestStart)\n        }\n        return res\n    },\n\n    //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n    removeInlineComment(str)\n    {\n        return this.removeAllBetween(str, /\\/\\//g, '//', '\\n')\n    },\n\n    //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n    removeBlockComment(str)\n    {\n        return this.removeAllBetween(str, /\\/\\*/g, '/*', '*/')\n    },\n\n    //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n    sanitizeLinesForStructs(str)\n    {\n        let res = ''\n        res = str.replace(/(?=[ ]+)\\,/g, ',')\n\n        let tmp = res + ''\n        res = ''\n\n        tmp.split(/\\r\\n|\\r|\\n/g).forEach(element =>\n        {\n            element = element.split(/\\/\\//g)[0].trim()\n            if (element !== '')\n            {\n                res += element\n            }\n        })\n        return res\n    },\n\n    //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n    parseStructs(str, dict)\n    {\n        let result = []\n        str = this.sanitizeLinesForStructs(str)\n        const isContainStruct = str.match(/struct/g)\n        if (!isContainStruct)\n        {\n            return []\n        }\n        else\n        {\n            let strStructs = []\n            while (str.match(/struct/g))\n            {\n                strStructs.push(this.getBetweenStr(str, 'struct', '}'))\n                let strFull = strStructs[strStructs.length - 1]\n                str = this.removeStr(str, strFull)\n\n                let strMembers = this.getBetweenStr(strFull, '{', '}')\n                strFull = this.removeStr(strFull, strMembers)\n                strMembers = this.removeStr(strMembers, /\\{|\\}/g)\n                strMembers = strMembers.replace(/; |;| ;/g, ';')\n                strMembers = strMembers.replace(/[ ]+/g, ' ')\n\n                const arrMembers = strMembers.split(';')\n                let members = []\n                for (let i = 0; i < arrMembers.length; i++)\n                {\n                    let typeName = arrMembers[i].split(' ')\n                    if (typeName[0] && typeName[1])\n                    {\n                        members.push(new Keyword({\n                            type: typeName[0],\n                            name: typeName[1],\n                            render: `<span class=\"autocomp-name\">${typeName[1]}</span><div class=\"icon-code-user\"></div><span class=\"autocomp-type\">${typeName[0]}</span>`\n                        }))\n                    }\n                }\n\n                const typeName = strFull.split(' ')\n                const name = typeName[1]\n                let snippet = name\n                snippet += ' var_name = '\n                snippet += name\n                snippet += '('\n                for (let i = 0; i < members.length; i++)\n                {\n                    snippet += members[i].name\n                    snippet += '@'\n                    snippet += members[i].type\n                    snippet += (i < members.length - 1) ? ', ' : ''\n                }\n                snippet += ');'\n\n                result.push(new Keyword({\n                    type: typeName[0],\n                    name: name,\n                    members: members,\n                    render: `<span class=\"autocomp-name\">${name}</span><div class=\"icon-code-user\"></div><span class=\"autocomp-type\">${typeName[0]}</span>`,\n                    snippet: snippet\n                }))\n            }\n        }\n        return result\n    },\n\n    //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n    sanitizeLinesForMacroFunctionsVariables(str)\n    {\n        let res = ''\n        str = this.removeAllBetween(str, /struct/g, 'struct', '}')\n        str.split(/\\r\\n|\\r|\\n/g).forEach(element =>\n        {\n            element = element.replace(/\\{/g, '{;')\n            element = this.removeStr(element, /\\}/g)\n            element = this.removeStr(element, /(?<=[.])([xyz]+)/g)\n            element = element.replace(/[ ]+/g, ' ')\n            element = element.trim()\n            if (element.match(/\\/\\//g))\n            {\n                element = ''\n            }\n            if (element.match(/precision/g))\n            {\n                element = ''\n            }\n            if (element.match(/#define/g))\n            {\n                element += ';'\n            }\n            if (element !== '')\n            {\n                res += element\n            }\n        })\n        return res\n    },\n\n    //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n    parseMacroLine(str, dict)\n    {\n        let result = []\n        str = this.removeAllBetween(str, /\\(/g, '(', ')').trim()\n        const typeName = str.split(' ')\n        result.push(new Keyword({\n            type: typeName[0],\n            name: typeName[1],\n            render: `<span class=\"autocomp-name\">${typeName[1]}</span><div class=\"icon-code-user\"></div><span class=\"autocomp-type\">${typeName[0]}</span>`\n        }))\n        return result\n    },\n\n    //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n    parseFunctionLine(str, dict)\n    {\n        let result = []\n\n        str = str.replace(/\\s/g, ' ')\n        str = str.replace(/[ ]+/g, ' ')\n        str = str.trim()\n\n        // args\n        let args = []\n        let strArgs = this.getBetweenStr(str, '(', ')')\n        strArgs = this.removeStr(strArgs, /[()]/g)\n        strArgs = strArgs.trim()\n        strArgs = strArgs.replace(/\\s/g, ' ')\n        strArgs = strArgs.replace(/\t',/g, ' ')\n        strArgs = strArgs.replace(/inout/g, ' ')\n        strArgs = strArgs.replace(/const/g, ' ')\n        strArgs = strArgs.replace(/in/g, ' ')\n        strArgs = strArgs.replace(/out/g, ' ')\n        strArgs = strArgs.replace(/[ ]+/g, ' ')\n\n        strArgs = strArgs.split(',')\n        for (let i = 0; i < strArgs.length; i++)\n        {\n            let arg = strArgs[i].trim().split(/ /g)\n            if (arg[0] && arg[1])\n            {\n                args.push(new Keyword({\n                    type: arg[0],\n                    name: arg[1],\n                    render: `<span class=\"autocomp-name\">${arg[1]}</span><div class=\"icon-code-user\"></div><span class=\"autocomp-type\">${arg[0]}</span>`\n                }))\n            }\n        }\n\n        const typeName = str.split(/[ (]/g)\n        const name = typeName[1]\n        let snippet = name + '('\n        for (let i = 0; i < args.length; i++)\n        {\n            snippet += args[i].name\n            snippet += '@'\n            snippet += args[i].type\n            snippet += (i < args.length - 1) ? ', ' : ''\n        }\n        snippet += ')'\n\n        // type/name\n        result.push(new Keyword({\n            type: typeName[0],\n            name: typeName[1],\n            args: args,\n            render: `<span class=\"autocomp-name\">${typeName[1]}</span><div class=\"icon-code-user\"></div><span class=\"autocomp-type\">${typeName[0]}</span>`,\n            snippet: snippet\n        }))\n        return result\n    },\n\n    //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n    parseVariables(str, dict)\n    {\n        let result = []\n        //#1: remove brackets\n        str = this.removeAllNested(str, /\\(|\\)/g, '(', ')')\n\n        //#2: remove initializing \n        let eqPos = str.indexOf('=')\n        let cmPos = str.indexOf(/,/g)\n        cmPos = (cmPos === -1) ? str.length : cmPos\n        while (str.match('='))\n        {\n            str = str.replace(str.substr(eqPos, cmPos - eqPos + 1), '')\n            eqPos = str.indexOf('=')\n            cmPos = str.indexOf(/,/g)\n            cmPos = (cmPos === -1) ? str.length : cmPos\n        }\n        str = str.replace(/ ,|, |,/g, ',')\n\n        const typeNames = str.split(/[ ,]/g)\n        const type = typeNames[0]\n        for (let j = 1; j < typeNames.length; j++)\n        {\n            if (typeNames[j] !== '')\n            {\n                result.push(new Keyword({\n                    type: type,\n                    name: typeNames[j],\n                    render: `<span class=\"autocomp-name\">${typeNames[j]}</span><div class=\"icon-code-user\"></div><span class=\"autocomp-type\">${type}</span>`\n                }))\n            }\n        }\n        return result\n    },\n\n    //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n    getLinesArray(str)\n    {\n        let array = []\n        str.split(';').forEach(element =>\n        {\n            if (!element.match(/if|else|switch|for|return/g))\n            {\n                array.push(element)\n            }\n        })\n        return array\n    },\n\n    //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n    parseMacrosFunctionsVariables(str, dict)\n    {\n        str = this.sanitizeLinesForStructs(str)\n\n        let result = []\n\n        const array = this.getLinesArray(str)\n\n        for (let i = 0; i < array.length; i++)\n        {\n            const lineStr = array[i].trim()\n            const isMacro = lineStr.match(/#define/g)\n            const isFunction = lineStr.match(/{/g)\n            const isDefinition = Builtins.isType(lineStr.split(' ')[0]) || dict.isStructType(lineStr.split(' ')[0])\n\n            if (!isDefinition) continue\n\n            if (isMacro)\n            {\n                result.push(this.parseMacroLine(lineStr, dict))\n            }\n            else if (isFunction)\n            {\n                result.push(this.parseFunctionLine(lineStr, dict))\n            }\n            else\n            {\n                result.push(this.parseVariables(lineStr, dict))\n            }\n        }\n        return result\n    }\n}\n\nexport default Tokenizer","//   _   _                                           _ \n//  ( ) ( )                                         ( )\n//  | |/'/'   __   _   _  _   _   _    _    _ __   _| |\n//  | , <   /'__`\\( ) ( )( ) ( ) ( ) /'_`\\ ( '__)/'_` |\n//  | |\\`\\ (  ___/| (_) || \\_/ \\_/ |( (_) )| |  ( (_| |\n//  (_) (_)`\\____)`\\__, |`\\___x___/'`\\___/'(_)  `\\__,_)\n//                ( )_| |                              \n//                `\\___/'                              \n//   _       _               _                         \n//  ( )  _  ( )             ( )                        \n//  | | ( ) | |   _    _ __ | |/')    __   _ __        \n//  | | | | | | /'_`\\ ( '__)| , <   /'__`\\( '__)       \n//  | (_/ \\_) |( (_) )| |   | |\\`\\ (  ___/| |          \n//  `\\___x___/'`\\___/'(_)   (_) (_)`\\____)(_)          \n//                                                     \n\nimport KeywordDictionary from './keyword_dictionary'\nimport Keyword from './keyword'\nimport Tokenizer from './tokenizer'\nimport Builtins from './builtins'\n\n\nlet strPrevStructCode = ''\nlet arrPrevStructs = []\n\n// Dictionaries\n//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nconst keywordDict = {}\nkeywordDict['Builtins'] = new KeywordDictionary('Builtins')\nkeywordDict['BufferA'] = new KeywordDictionary('BufferA')\nkeywordDict['BufferB'] = new KeywordDictionary('BufferB')\nkeywordDict['BufferC'] = new KeywordDictionary('BufferC')\nkeywordDict['BufferD'] = new KeywordDictionary('BufferD')\nkeywordDict['Image'] = new KeywordDictionary('Image')\nkeywordDict['Sound'] = new KeywordDictionary('Sound')\nkeywordDict['Common'] = new KeywordDictionary('Common')\n\nlet strPrevCodeFull = ''\nlet linesprevCodeWords = ['']\n\nconst initBltinDict = () =>\n{\n    Builtins.init()\n    keywordDict['Builtins'] = Builtins.dictionary\n}\n\nconst filterDictByWord = (dictName, curWord) =>\n{\n    console.log('started: KeywordWorker.filterDictByWord...')\n\n    const filteredBuiltinsList = keywordDict['Builtins'].filter(curWord)\n    const filteredUserList = keywordDict[dictName].filter(curWord)\n    console.log('filteredUserList: ', filteredUserList)\n\n    const filteredDict = filteredBuiltinsList.concat(filteredUserList)\n    console.log('filteredDict: ', filteredDict)\n    if (filteredDict.length >= 1 || (filteredDict[0] !== undefined && filteredDict[0].text !== undefined && filteredDict.length === 1 && filteredDict[0].text.toUpperCase() !== curWord.toUpperCase()))\n    {\n        filteredDict.sort((a, b) =>\n        {\n            // Use toUpperCase() to ignore character casing\n            const textA = a.name.toUpperCase()\n            const textB = b.name.toUpperCase()\n\n            let comparison = 0\n            if (textA > textB)\n            {\n                comparison = 1\n            } else if (textA < textB)\n            {\n                comparison = -1\n            }\n            return comparison\n        })\n    }\n    postMessage(JSON.stringify({ name: 'filter_succeed', content: { list: filteredDict } }, null, \"\\t\"))\n}\n\nconst filterStructByWord = (dictName, curWord) =>\n{\n    console.log('started: KeywordWorker.filterStructByWord...', curWord)\n\n    let filteredDict = keywordDict[dictName].filter(curWord, true)\n    console.log('filteredDict: ', filteredDict)\n\n    if (filteredDict.length === 1)//|| (filteredDict[0] !== undefined && filteredDict[0].text !== undefined && filteredDict.length === 1 && filteredDict[0].text.toUpperCase() !== curWord.toUpperCase()))\n    {\n        filteredDict = keywordDict[dictName].filter(filteredDict[0].type)\n        if (filteredDict[0].members !== null)\n        {\n            console.log('filteredDict[0].members: ', filteredDict[0].members)\n            postMessage(JSON.stringify({ name: 'filter_succeed', content: { list: filteredDict[0].members } }, null, \"\\t\"))\n        }\n    }\n    postMessage(JSON.stringify({ name: 'filter_failed', content: null }, null, \"\\t\"))\n}\n\nconst getRenewedLineNumbers = (str) =>\n{\n    let renewedLineNumbers = []\n    const linesnewCodeWords = str.split(';')\n    const maxLen = Math.max(linesprevCodeWords.length, linesnewCodeWords.length)\n    for (let i = 0; i < maxLen; i++)\n    {\n        if (linesprevCodeWords[i] === undefined) linesprevCodeWords[i] = ''\n        if (linesnewCodeWords[i] === undefined) linesnewCodeWords[i] = ''\n        if (linesprevCodeWords[i] !== linesnewCodeWords[i])// || linesnewCodeWords[i].match(/{/))\n        {\n            renewedLineNumbers.push(i)\n        }\n    }\n    linesprevCodeWords = linesnewCodeWords\n    console.log('Renewed Lines: ', renewedLineNumbers.length)\n    return renewedLineNumbers\n}\n\nconst syncStructs = (dictName, str) =>\n{\n    const result = Tokenizer.parseStructs(str)\n    if (result.length >= 1)\n    {\n        if (arrPrevStructs.length > 0)\n        {\n            for (let i = 0; i < arrPrevStructs.length; i++)\n            {\n                for (let j = 0; j < arrPrevStructs[i].length; j++)\n                {\n                    keywordDict[dictName].remove(result[i][j])\n                }\n            }\n        }\n\n        arrPrevStructs = result.concat()\n\n        // Found structs...\n        for (let i = 0; i < result.length; i++)\n        {\n            keywordDict[dictName].add(result[i])\n        }\n    }\n}\n\nconst syncMacrosFunctionsVariables = (dictName, str) =>\n{\n    const strNewCodeFull = Tokenizer.sanitizeLinesForMacroFunctionsVariables(str)\n    const renewedLineNumbers = getRenewedLineNumbers(strNewCodeFull)\n\n    if (strPrevCodeFull !== '')\n    {\n        const prevL = strPrevCodeFull.split(/\\;/)\n        for (let i = 0; i < prevL.length; i++)\n        {\n            if (renewedLineNumbers.some(lineId => lineId === i))\n            {\n                const renderWords = Tokenizer.parseMacrosFunctionsVariables(prevL[i], keywordDict[dictName])\n                for (let j = 0; j < renderWords.length; j++)\n                {\n                    for (let k = 0; k < renderWords[j].length; k++)\n                    {\n                        keywordDict[dictName].remove(renderWords[j][k])\n                    }\n                }\n            }\n        }\n    }\n\n    if (strNewCodeFull !== '')\n    {\n        const newL = strNewCodeFull.split(/\\;/)\n        for (let i = 0; i < newL.length; i++)\n        {\n            if (renewedLineNumbers.some(lineId => lineId === i))\n            {\n                const renderWords = Tokenizer.parseMacrosFunctionsVariables(newL[i], keywordDict[dictName])\n                for (let j = 0; j < renderWords.length; j++)\n                {\n                    for (let k = 0; k < renderWords[j].length; k++)\n                    {\n                        keywordDict[dictName].add(renderWords[j][k])\n                    }\n                }\n            }\n        }\n    }\n    strPrevCodeFull = strNewCodeFull\n}\n\nconst syncUserDict = (dictName, str) =>\n{\n    console.log('started: KeywordWorker.syncUserDict...')\n    str = Tokenizer.removeInlineComment(str)\n    str = Tokenizer.removeBlockComment(str)\n    str = Tokenizer.removePrecisions(str)\n    str = Tokenizer.removePreProcessor(str)\n    syncStructs(dictName, str)\n    syncMacrosFunctionsVariables(dictName, str)\n    console.log('keywordDict[dictName].renderWords: ', keywordDict[dictName].renderWords)\n}\n\n\n// Message\n//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nonmessage = (msg) =>\n{\n    const data = JSON.parse(msg.data)\n    switch (data.name)\n    {\n        case 'initBltinDict':\n            initBltinDict()\n            break\n\n        case 'syncUserDict':\n            syncUserDict(data.content.dictName, data.content.strCode)\n            break\n\n        case 'filterDictByWord':\n            filterDictByWord(data.content.dictName, data.content.curWord)\n            break\n\n        case 'filterStructByWord':\n            filterStructByWord(data.content.dictName, data.content.curWord)\n            break\n\n        default:\n            break\n    }\n}"],"sourceRoot":""}